{"version":3,"file":"main.js","sources":["../../node_modules/swipey/dist/index.js","../../node_modules/svelte/internal/index.mjs","../../src/Card.svelte","../../src/Cards.svelte","../../src/data/hiragana.js","../../src/data/katakana.js","../../src/services.js","../../src/NewWord.svelte","../../src/App.svelte","../../src/utils.js","../../src/main.js"],"sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.swipey=t():e.swipey=t()}(self,(function(){return(()=>{\"use strict\";var e={d:(t,o)=>{for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})}},t={};e.r(t),e.d(t,{Directions:()=>i,default:()=>l});var o=[\"delta\",\"timeout\",\"fromTop\",\"element\",\"logger\"],n=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.logger,n=void 0===t?console:t,r=0,i=Object.keys(e);r<i.length;r++){var c=i[r];o.includes(c)||n.warn(\"\".concat(c,\" is not a valid option\"))}},r=function(){return Date.now()},i={DOWN:\"DOWN\",UP:\"UP\",LEFT:\"LEFT\",RIGHT:\"RIGHT\"},c=i.DOWN,d=i.UP,u=i.LEFT;function l(e,t){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};n(o);var i,l,a,s,f,v,p=o.delta,m=void 0===p?100:p,y=o.timeout,g=void 0===y?1/0:y,h=o.fromTop,b=void 0!==h&&h,T=o.element,O=void 0===T?document:T,j=function(e){a=e.touches[0].clientX,s=e.touches[0].clientY,f=window.scrollY,v=r()},w=function(o){var n,p;i=o.changedTouches[0].clientX,l=o.changedTouches[0].clientY,(!b||0===f)&&(n=e===u?a-i:i-a,p=e===d?s-l:l-s,([d,c].includes(e)?p:n)>=m)&&r()-v<g&&t(o),v=null};return O.addEventListener(\"touchstart\",j),O.addEventListener(\"touchend\",w),function(){O.removeEventListener(\"touchstart\",j),O.removeEventListener(\"touchend\",w)}}return t})()}));\n//# sourceMappingURL=index.js.map","function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_await_block_branch, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script>\n  export let content;\n\n  const ENGLISH = 'english';\n  const JAPANESE = 'japanese';\n\n  let side = ENGLISH;\n\n  const flip = () => (side = side === ENGLISH ? JAPANESE : ENGLISH);\n\n  // TODO: Use ResizeObserver, e.g. https://medium.com/@mandy.michael/resize-text-to-fit-the-parent-with-variable-font-width-axis-16921b6687ae\n  $: fontSize =\n    window.innerWidth < 400 ? `${Math.max(70 / content.length, 10)}vw` : '400%';\n</script>\n\n<button style={`font-size: ${fontSize};`} class=\"content\" on:click={flip}>\n  {#if !content}\n    Start\n  {:else}\n    {content[side]}\n  {/if}\n</button>\n\n<style>\n  .content,\n  .content:active {\n    height: 50vh;\n    padding: 0;\n    margin: 2.5rem 1rem;\n    background: none;\n    border: none;\n  }\n</style>\n","<script>\n  import Card from './Card.svelte';\n  export let groups;\n  export let shuffleCards;\n  export let removeCard;\n  export let currentCardIdx;\n\n  const getNext = () => (i = i + 1 > groups.length - 1 ? 0 : i + 1);\n  const getPrev = () => (i = i - 1 < 0 ? groups.length - 1 : i - 1);\n\n  $: i = currentCardIdx;\n  $: content = groups[i];\n</script>\n\n<Card {content} />\n<div class=\"arrows\">\n  <button class=\"arrow\" on:click={getPrev}>&lt;</button>\n  <button class=\"arrow\" on:click={getNext}>&gt;</button>\n</div>\n<div class=\"buttons\">\n  <button on:click={shuffleCards}>Shuffle all</button>\n  <button on:click={() => removeCard(groups[i])}>I know this one!</button>\n</div>\n\n<style>\n  button {\n    padding: 0.4em;\n  }\n\n  .buttons {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 3em;\n  }\n\n  .arrows {\n    width: 100%;\n    display: flex;\n    justify-content: space-evenly;\n  }\n\n  .arrow {\n    font-size: 15vw;\n    padding: 0;\n    border: none;\n    background: none;\n  }\n</style>\n","const data = {\n  a: [\n    ['a', 'あ'],\n    ['i', 'い'],\n    ['u', 'う'],\n    ['e', 'え'],\n    ['o', 'お'],\n  ],\n  k: [\n    ['ka', 'か'],\n    ['ki', 'き'],\n    ['ku', 'く'],\n    ['ke', 'け'],\n    ['ko', 'こ'],\n  ],\n  g: [\n    ['ga', 'が'],\n    ['gi', 'ぎ'],\n    ['gu', 'ぐ'],\n    ['ge', 'げ'],\n    ['go', 'ご'],\n  ],\n  s: [\n    ['sa', 'さ'],\n    ['shi', 'し'],\n    ['su', 'す'],\n    ['se', 'せ'],\n    ['so', 'そ'],\n  ],\n  z: [\n    ['za', 'ざ'],\n    ['ji', 'じ'],\n    ['zu', 'ず'],\n    ['ze', 'ぜ'],\n    ['zo', 'ぞ'],\n  ],\n  t: [\n    ['ta', 'た'],\n    ['chi', 'ち'],\n    ['tsu', 'つ'],\n    ['te', 'て'],\n    ['to', 'と'],\n  ],\n  d: [\n    ['da', 'だ'],\n    ['dji', 'ぢ'],\n    ['dzu', 'づ'],\n    ['de', 'で'],\n    ['do', 'ど'],\n  ],\n  n: [\n    ['na', 'な'],\n    ['ni', 'に'],\n    ['nu', 'ぬ'],\n    ['ne', 'ね'],\n    ['no', 'の'],\n  ],\n  h: [\n    ['ha', 'は'],\n    ['hi', 'ひ'],\n    ['fu', 'ふ'],\n    ['he', 'へ'],\n    ['ho', 'ほ'],\n  ],\n  b: [\n    ['ba', 'ば'],\n    ['bi', 'び'],\n    ['bu', 'ぶ'],\n    ['be', 'べ'],\n    ['bo', 'ぼ'],\n  ],\n  p: [\n    ['pa', 'ぱ'],\n    ['pi', 'ぴ'],\n    ['pu', 'ぷ'],\n    ['pe', 'ぺ'],\n    ['po', 'ぽ'],\n  ],\n  m: [\n    ['ma', 'ま'],\n    ['mi', 'み'],\n    ['mu', 'む'],\n    ['me', 'め'],\n    ['mo', 'も'],\n  ],\n  y: [\n    ['ya', 'や'],\n    ['yu', 'ゆ'],\n    ['yo', 'よ'],\n  ],\n  r: [\n    ['ra', 'ら'],\n    ['ri', 'り'],\n    ['ru', 'る'],\n    ['re', 'れ'],\n    ['ro', 'ろ'],\n  ],\n  w: [\n    ['wa', 'わ'],\n    // ['we', 'ゑ'], // Obsolete\n    // ['wi', 'ゐ'], // Obsolete\n    ['wo', 'を'],\n    ['n', 'ん'],\n  ],\n  ky: [\n    ['kya', 'きゃ'],\n    ['kyu', 'きゅ'],\n    ['kyo', 'きょ'],\n  ],\n  ch: [\n    ['cha', 'ちゃ'],\n    ['chu', 'ちゅ'],\n    ['cho', 'ちょ'],\n  ],\n  // images: [['I', 'https://helloitsjoe.github.io/flashcards/example.jpg']],\n\n  // Later:\n  // ['sha', 'しゃ'],\n  // ['sho', 'しょ'],\n  // ['shu', 'しゅ'],\n  // [],\n  // ['nya', 'にゃ'],\n  // ['nyo', 'にょ'],\n  // ['nyu', 'にゅ'],\n  // [],\n  // ['mya', 'みゃ'],\n  // ['myo', 'みょ'],\n  // ['myu', 'みゅ'],\n  // [],\n  // ['rya', 'りゃ'],\n  // ['ryo', 'りょ'],\n  // ['ryu', 'りゅ'],\n  // [],\n  // ['gya', 'ぎゃ'],\n  // ['gyo', 'ぎょ'],\n  // ['gyu', 'ぎゅ'],\n  // [],\n  // ['ja', 'じゃ'],\n  // ['jo', 'じょ'],\n  // ['ju', 'じゅ'],\n  // [],\n  // ['dja', 'ぢゃ'],\n  // ['djo', 'ぢょ'],\n  // ['dju', 'ぢゅ'],\n  // [],\n  // ['bya', 'びゃ'],\n  // ['byo', 'びょ'],\n  // ['byu', 'びゅ'],\n  // [],\n  // ['pya', 'ぴゃ'],\n  // ['pyo', 'ぴょ'],\n  // ['pyu', 'ぴゅ'],\n  // [],\n};\n\nexport default data;\n","const data = {\n  a: [\n    ['a', 'ア'],\n    ['i', 'イ'],\n    ['u', 'ウ'],\n    ['e', 'エ'],\n    ['o', 'オ'],\n  ],\n  k: [\n    ['ka', 'カ'],\n    ['ki', 'キ'],\n    ['ku', 'ク'],\n    ['ke', 'ケ'],\n    ['ko', 'コ'],\n  ],\n  s: [\n    ['sa', 'サ'],\n    ['shi', 'シ'],\n    ['su', 'ス'],\n    ['se', 'セ'],\n    ['so', 'ソ'],\n  ],\n  t: [\n    ['ta', 'タ'],\n    ['chi', 'チ'],\n    ['tsu', 'ツ'],\n    ['te', 'テ'],\n    ['to', 'ト'],\n  ],\n  n: [\n    ['na', 'ナ'],\n    ['ni', 'ニ'],\n    ['nu', 'ヌ'],\n    ['ne', 'ネ'],\n    ['no', 'ノ'],\n  ],\n  h: [\n    ['ha', 'ハ'],\n    ['hi', 'ヒ'],\n    ['hu', 'フ'],\n    ['he', 'ヘ'],\n    ['ho', 'ホ'],\n  ],\n  m: [\n    ['ma', 'マ'],\n    ['mi', 'ミ'],\n    ['mu', 'ム'],\n    ['me', 'メ'],\n    ['mo', 'モ'],\n  ],\n  y: [\n    ['ya', 'ヤ'],\n    ['yu', 'ユ'],\n    ['yo', 'ヨ'],\n  ],\n  r: [\n    ['ra', 'ラ'],\n    ['ri', 'リ'],\n    ['ru', 'ル'],\n    ['re', 'レ'],\n    ['ro', 'ロ'],\n  ],\n  w: [\n    ['wa', 'ワ'],\n    ['wo', 'ヲ'],\n    ['n', 'ン'],\n  ],\n  // images: [['I', 'https://helloitsjoe.github.io/flashcards/example.jpg']],\n};\n\nexport default data;\n","const DEFAULT_BRANCH = 'new-words';\nconst GIT_URL = 'https://api.github.com/repos/helloitsjoe/flashcards';\n\nexport const ENABLE_NEW_WORDS = true;\n\n// References\n// https://gist.github.com/harlantwood/2935203\n// https://mdswanson.com/blog/2011/07/23/digging-around-the-github-api-take-2.html\n// https://docs.github.com/en/rest/reference/git#trees\n// https://docs.github.com/en/rest/reference/pulls#create-a-pull-request\n\nconst myFetch = (url, options) => {\n  return fetch(url, options)\n    .then(res => {\n      if (!res.ok) {\n        return res.json().then(err => {\n          throw new Error(\n            `${res.status}! ${err.message}. ${err.documentation_url}`\n          );\n        });\n      }\n      if (options.headers.Accept.includes('v3.raw')) {\n        return res.text();\n      }\n      return res.json();\n    })\n    .then(res => {\n      console.log(url);\n      console.log(res);\n      return res;\n    });\n};\n\nexport const addWord = async ({ key, value }, words, token) => {\n  sessionStorage.setItem('flashcards-token', token);\n\n  const headers = {\n    'Content-Type': 'text/html',\n    Accept: 'application/vnd.github.v3+json',\n    Authorization: `token ${token}`,\n  };\n\n  const getGit = (endpoint, options = {}, route = '/git') => {\n    return myFetch(`${GIT_URL}${route}/${endpoint}`, {\n      headers: { ...headers, ...options.headers },\n    });\n  };\n\n  // Route is not ideal but 'pulls' is the only endpoint that isn't at /git\n  const postGit = (endpoint, options, route = '/git') => {\n    return myFetch(`${GIT_URL}${route}/${endpoint}`, {\n      method: 'POST',\n      body: JSON.stringify(options.body),\n      headers: { ...headers, ...options.headers },\n    });\n  };\n\n  const patchGit = (endpoint, options, route = '/git') => {\n    return myFetch(`${GIT_URL}${route}/${endpoint}`, {\n      method: 'PATCH',\n      body: JSON.stringify(options.body),\n      headers: { ...headers, ...options.headers },\n    });\n  };\n\n  const putGit = (endpoint, options, route = '/git') => {\n    return myFetch(`${GIT_URL}${route}/${endpoint}`, {\n      method: 'PATCH',\n      body: JSON.stringify(options.body),\n      headers: { ...headers, ...options.headers },\n    });\n  };\n\n  const getHead = () =>\n    getGit(`refs/heads/${DEFAULT_BRANCH}`).then(branch => branch.object.sha);\n\n  const getLastTreeSha = mainHeadSha =>\n    getGit(`commits/${mainHeadSha}`).then(lastCommit => lastCommit.tree.sha);\n\n  // // Unused because getFileContents is simpler, but keeping for reference\n  // const getFileSha = treeSha => {\n  //   return getGit(`trees/${treeSha}`).then(({ tree }) => {\n  //     const words = tree.find(({ path }) => path === 'words.json');\n  //     const src = tree.find(({ path }) => path === 'src' || path === 'data');\n\n  //     if (words) {\n  //       return words.sha;\n  //     }\n\n  //     if (src) {\n  //       return getFileSha(src.sha);\n  //     }\n  //   });\n  // };\n\n  // const getBlob = fileSha => {\n  //   return getGit(`blobs/${fileSha}`, {\n  //     headers: { Accept: 'application/vnd.github.v3.raw' },\n  //   }).then(data => data.content);\n  // };\n\n  // Unneeded if we pass `words` into `addWord`\n  // const getFileContents = () =>\n  //   getGit(\n  //     `contents/src/data/words.json`,\n  //     {\n  //       headers: {\n  //         // NOTE: raw content header only works on main branch, ?ref=branch only returns json\n  //         Accept: 'application/vnd.github.v3.raw',\n  //       },\n  //     },\n  //     ''\n  //   );\n\n  const updateContent = (content, { key, value } = {}) => {\n    // const json = JSON.parse(content);\n    console.log('content', content);\n    if (!key || !value || key in content) {\n      throw new Error(`Key ${key} already exists`);\n    }\n\n    const newJson = { ...content, [key]: value };\n\n    console.log('New json:', newJson);\n\n    return JSON.stringify(newJson, null, 2);\n  };\n\n  const createTreeObject = (lastTreeSha, content) => {\n    return postGit(`trees`, {\n      body: {\n        base_tree: lastTreeSha,\n        tree: [\n          {\n            path: 'src/data/words.json',\n            mode: '100644',\n            content,\n          },\n        ],\n      },\n    });\n  };\n\n  const createCommit = (latestCommitSha, newTree, key) => {\n    return postGit('commits', {\n      body: {\n        message: `Adding new word: ${key}`,\n        parents: [latestCommitSha],\n        tree: newTree,\n      },\n    });\n  };\n\n  const updateBranch = (sha, branch) => {\n    return patchGit(`refs/heads/${branch}`, {\n      body: { sha },\n    });\n  };\n\n  // const createBranch = (sha, branch) => {\n  //   return postGit('refs', {\n  //     body: {\n  //       ref: `refs/heads/${branch}`,\n  //       sha,\n  //     },\n  //   });\n  // };\n\n  // const createPullRequest = branch => {\n  //   return postGit(\n  //     'pulls',\n  //     {\n  //       body: {\n  //         title: 'Add a word',\n  //         head: branch,\n  //         base: DEFAULT_BRANCH,\n  //         maintainer_can_modify: true,\n  //       },\n  //     },\n  //     ''\n  //   );\n  // };\n\n  // Option 1: long-lived branch that `main` updates from\n  const latestCommitSha = await getHead();\n  const latestTreeSha = await getLastTreeSha(latestCommitSha);\n  // const fileSha = await getFileSha(latestTreeSha);\n  // const fileContents = await getBlob(fileSha);\n  // const fileContents = await getFileContents();\n\n  const updatedContent = updateContent(words, {\n    key,\n    value,\n  });\n\n  const created = await createTreeObject(latestTreeSha, updatedContent);\n  const commit = await createCommit(latestCommitSha, created.sha, key);\n  const ref = await updateBranch(commit.sha, DEFAULT_BRANCH);\n\n  return JSON.parse(updatedContent);\n\n  // Option 2 (includes lines above): short-lived branches that make PRs to main\n\n  // const branch = new Date()\n  //   .toISOString()\n  //   .slice(0, 16)\n  //   .replace('T', '_')\n  //   .replace(':', '-');\n\n  // const ref = await createBranch(commit.sha, branch);\n  // const res = await createPullRequest(branch);\n};\n\nexport const addWordLocal = words => {\n  localStorage.setItem('flashcards-words', JSON.stringify(words));\n  return words;\n};\n\nexport const getWordsLocal = () => {\n  const words = localStorage.getItem('flashcards-words') || '{}';\n  return JSON.parse(words);\n};\n","<script>\n  import { addWordLocal } from './services';\n  export let words;\n  export let onNewWordAdded;\n\n  let newWord = '';\n  let newTranslation = '';\n  let warning = '';\n  let submitting = false;\n\n  // let token = sessionStorage.getItem('flashcards-token') || '';\n  // let showTokenInput = !token;\n\n  let handleFormSubmit = async () => {\n    if (newWord in words) {\n      warning = `${newWord} already exists!`;\n      return;\n    }\n\n    warning = '';\n    // showTokenInput = !token;\n\n    submitting = true;\n    const newWords = [ ...words, {english: newWord, japanese: newTranslation }];\n    addWordLocal(newWords);\n    onNewWordAdded(newWords);\n\n    // showTokenInput = false;\n    newWord = '';\n    newTranslation = '';\n    submitting = false;\n  };\n</script>\n\n{#if warning}\n  <h2>{warning}</h2>\n{/if}\n\n<form on:submit|preventDefault={handleFormSubmit} class=\"new-word-form\">\n  <input placeholder=\"English\" bind:value={newWord} />\n  <input placeholder=\"Japanese\" lang=\"ja\" bind:value={newTranslation} />\n  <!-- {#if showTokenInput}\n    <input bind:value={token} />\n  {/if} -->\n  <button\n    class=\"submit\"\n    disabled={!(newWord.length && newTranslation) || submitting}\n    >{submitting ? 'Submitting...' : 'Submit'}</button\n  >\n</form>\n\n<style>\n  .new-word-form {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 2em;\n  }\n\n  .submit {\n    padding: 0.5em;\n  }\n</style>\n","<script>\n  import Cards from './Cards.svelte';\n  import hiragana from './data/hiragana';\n  import katakana from './data/katakana';\n  import Categories from './Categories.svelte';\n  import NewWord from './NewWord.svelte';\n  import { shuffle, convertWords } from './utils';\n  import { onCustomClick } from './custom-click';\n  import { getWordsLocal } from './services';\n  export let words = {};\n\n  let showDevBar = false;\n  let toggleAddWord = () => (showDevBar = !showDevBar);\n  // onCustomClick(() => (showDevBar = !showDevBar));\n\n  let categories = {\n    hiragana,\n    katakana,\n    words: { ...words, ...getWordsLocal() },\n  };\n\n  // Enable this to add hiragana/katakana\n  /* let groups = []; */\n  /* let started = false; */\n  \n  let groups = convertWords(categories.words);\n  let started = true;\n  let currentCardIdx = 0;\n\n  /* const startGame = temp => { */\n  /*   groups = temp; */\n  /*   started = true; */\n  /* }; */\n\n  const shuffleCards = () => (groups = shuffle(groups));\n  const removeCard = card => (groups = groups.filter(g => g[0] !== card[0]));\n  const handleNewWordAdded = newWords => {\n    groups = newWords\n    currentCardIdx = groups.length - 1;\n  };\n  // TODO: Sync words\n</script>\n\n<main>\n  <div class=\"card\">\n    <Cards {groups} {shuffleCards} {removeCard} {currentCardIdx} />\n    {#if showDevBar}\n      <NewWord\n        words={groups}\n        onNewWordAdded={handleNewWordAdded}\n      />\n      <div class=\"addWord-container\">\n        <div class=\"addWord\" on:click={toggleAddWord}>-</div>\n      </div>\n    {:else}\n      <div class=\"addWord-container\">\n        <div class=\"addWord\" on:click={toggleAddWord}>+</div>\n      </div>\n    {/if}\n  </div>\n</main>\n\n<style>\n  main {\n    background-color: lightgray;\n    width: 100vw;\n    height: 100vh;\n    min-height: -webkit-fill-available;\n    display: flex;\n  }\n\n  .card {\n    margin: 0.5rem auto;\n    /* padding-bottom: 3rem; */\n    width: calc(100% - 1rem);\n    height: calc(100% - 1rem);\n    max-width: 440px;\n    background: white;\n    border: 1px solid darkgray;\n    border-radius: 0.5em;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-end;\n  }\n\n  .addWord-container {\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .addWord {\n    font-size: 3rem;\n    margin-right: 0.5em;\n    margin-bottom: 0.5em;\n  }\n</style>\n","export const shuffle = (arr) => {\n  const temp = [...arr];\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [temp[i], temp[j]] = [temp[j], temp[i]];\n  }\n  return temp;\n};\n\n// TODO: Convert words in JSON and remove this function\nexport const convertWords = (words) => {\n  return Object.entries(words).map(([english, japanese]) => {\n    return { english, japanese };\n  });\n};\n","import onSwipe, { Directions } from 'swipey';\nimport words from './data/words.json';\nimport App from './App.svelte';\n\n// Pull to refresh\nonSwipe(Directions.DOWN, () => window.location.reload(), {\n  fromTop: true,\n});\n\nconst app = new App({\n  target: document.body,\n  props: {\n    words,\n  },\n});\n\nexport default app;\n"],"names":["self","module","e","d","t","o","n","Object","defineProperty","enumerable","get","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","Directions","i","default","l","arguments","length","logger","console","keys","c","includes","warn","concat","Date","now","DOWN","UP","LEFT","RIGHT","u","a","s","f","v","p","delta","m","y","timeout","g","h","fromTop","b","T","element","O","document","j","touches","clientX","clientY","window","scrollY","w","changedTouches","addEventListener","removeEventListener","noop","run","fn","blank_object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","name","createElement","text","data","createTextNode","space","listen","event","handler","options","prevent_default","preventDefault","this","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","create_component","mount_component","customElement","on_mount","on_destroy","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","intro","SvelteComponent","[object Object]","$destroy","type","index","indexOf","splice","$$props","obj","$$set","content","side","fontSize","innerWidth","Math","max","groups","shuffleCards","removeCard","currentCardIdx","k","z","ky","ch","getWordsLocal","words","localStorage","getItem","JSON","parse","onNewWordAdded","newWord","newTranslation","warning","submitting","newWords","english","japanese","setItem","stringify","addWordLocal","showDevBar","entries","convertWords","hiragana","katakana","arr","temp","floor","random","shuffle","card","onSwipe","location","reload","app","body"],"mappings":"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"}